#version 330 core
struct Material { // 光反射强度
	sampler2D diffuse;
	sampler2D specTex;
	float shininess;
};
struct DirLight{
	vec3 lightDir;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
struct PointLight{
	vec3 position;
	float constant;
	float linear;
	float quadratic;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
struct SpotLight{
	vec3 position;
	vec3 SpotDir;
	float cutoff;
	float outercutOff;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
uniform Material material;
in vec2 TexCoord;
in vec3 fragPos;
vec3 CalDirLight(DirLight light, vec3 normal, vec3 viewDir) // 平行光
{
	// 环境光
	vec3 ambient = vec3(texture(material.diffuse,TexCoord))*light.ambient;
	// 漫反射
	float diff = max(dot(normalize(-light.lightDir),normalize(normal)),0.0);
	vec3 diffuse = light.diffuse*(vec3(texture(material.diffuse,TexCoord))*diff);
	// 镜面光
	vec3 refDir = normalize(reflect(light.lightDir,normal));
	float spec = pow(max(dot(refDir,viewDir),0.0),material.shininess);
	vec3 specular = light.specular*(vec3(texture(material.specTex,TexCoord))*spec);
	return (ambient + diffuse + specular);
}
vec3 CalPointLight(PointLight light, vec3 normal, vec3 viewDir) // 点光源
{
	float dis = length(light.position-fragPos);
	float reduce = 1.0/(light.constant+light.linear*dis + light.quadratic*dis*dis);
	vec3 lightDir = normalize(light.position-fragPos);
	// 环境光
	vec3 ambient = vec3(texture(material.diffuse,TexCoord))*light.ambient;
	// 漫反射
	float diff = max(dot(lightDir,normal),0.0);
	vec3 diffuse = light.diffuse*vec3(texture(material.diffuse,TexCoord))*diff;
	// 镜面反射
	vec3 ref = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir,ref),0.0),material.shininess);
	vec3 specular = light.specular*vec3(texture(material.specTex,TexCoord))*spec;
	
	return (ambient + diffuse + specular)*reduce;
}
vec3 CalSpotLight(SpotLight light, vec3 normal, vec3 viewDir) // 聚光灯
{
	float dis = length(light.position-fragPos);
	vec3 lightDir = normalize(light.position-fragPos);
	float theta = dot(-lightDir,light.SpotDir);
	float indentiy = max((theta-light.outercutOff)/(light.cutoff-light.outercutOff),0.0);
	// 环境光
	vec3 ambient = vec3(texture(material.diffuse,TexCoord))*light.ambient;
	// 漫反射
	float diff = max(dot(lightDir,normal),0.0);
	vec3 diffuse = light.diffuse*vec3(texture(material.diffuse,TexCoord))*diff*indentiy;
	// 镜面反射
	vec3 ref = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir,ref),0.0),material.shininess);
	vec3 specular = light.specular*vec3(texture(material.specTex,TexCoord))*spec*indentiy;
	
	return ambient + diffuse + specular;
}

#define POINT_LIGHT_NUM 4
uniform PointLight pointLight[POINT_LIGHT_NUM];
uniform DirLight dirlight;
uniform SpotLight spotLight;
in vec3 Normal;

uniform vec3 viewPos;
out vec4 color;
void main()
{
	vec3 viewDir = normalize(viewPos-fragPos);
	vec3 normal = normalize(Normal);
	vec3 result;
	
	result = vec3(texture(material.diffuse,TexCoord));
	color = vec4(result,1.0f);
}